//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputControls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""703c7a6c-87f8-4ee5-ac72-d54118b8f11d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b761a987-2efd-4c6b-8e9c-f8c7b06af7df"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""ac07cc6c-a94b-4689-88b7-a836285e01a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponLeft"",
                    ""type"": ""Button"",
                    ""id"": ""4e5d900c-7e01-4e99-91d3-9ae6e126804a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponRight"",
                    ""type"": ""Button"",
                    ""id"": ""61be5b2f-9201-4966-b332-433c0428eca3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenShop"",
                    ""type"": ""Button"",
                    ""id"": ""41eb9cb4-57a5-4318-9d3a-4d33c2981997"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""a30afa17-590b-44f0-b967-aa7d93c088a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dev"",
                    ""type"": ""Button"",
                    ""id"": ""1e083281-c368-4590-aae3-989f63db89b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector-KeyboardControls"",
                    ""id"": ""802f9bc7-3ccd-43b9-863c-d67234e651f4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""493f18ab-865c-4050-86a7-88121bfd71e2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4b02b85e-bd61-4deb-aeba-299260418a2f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0885d2a6-7d9f-4ca6-80ae-0d1a27493d60"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eaf3707b-e3b3-4f91-9178-660f3f433632"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector-Xbox Controls"",
                    ""id"": ""9dc1c17a-5b7e-4f7c-aacf-b0c1975ba9e4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""33aa9211-9a5c-40dc-a512-d0a06b9d0f0a"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""187fd2af-c5a9-49b4-a16c-e24b9e89ad26"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5eb334c9-5753-470a-96af-5e0865203612"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""67a2008b-a1af-4169-b006-781f5ba26993"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2f15eb62-b167-4ac3-a2f8-190e94f3b306"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92905f41-0f6c-45c2-b2a8-2ffcb21b5d26"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56e878f0-dcc1-49d8-92df-2c5c9355c125"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42ada559-e964-4429-a7c7-8fd5148d8187"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a51179e0-0ea5-4baa-8993-1d5780494bbf"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bd36444-c9a8-4da7-aeba-86af7234725b"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca4310ee-d5f5-48ae-ba2a-c51491755386"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""595ee419-21a5-4562-85d4-152ddc20533c"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb14ec3e-617e-48a0-8a01-0821b7cebf0c"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b90fcf02-f0fb-4a6e-942b-83556e942d2c"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""879327b0-1fd0-4617-9d12-6daef7639a89"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dev"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deaf81e4-927d-48a2-b4b0-5f459c3bc60e"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dev"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CrosshairMovement"",
            ""id"": ""28f341d9-2534-4c09-b0c7-f31f1ea77657"",
            ""actions"": [
                {
                    ""name"": ""MouseMovement"",
                    ""type"": ""Value"",
                    ""id"": ""735a95e6-8385-4896-a3cc-8b2e3b3a94df"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JoystickMovement"",
                    ""type"": ""Value"",
                    ""id"": ""8d60f055-c2aa-4fc1-be7e-d6047d19b5b6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9d57cd47-bc74-4d4e-aa68-4cd9c55be665"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0686b8fd-911b-496a-bb1d-6b2e71faabf0"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Shoot = m_Player.FindAction("Shoot", throwIfNotFound: true);
        m_Player_WeaponLeft = m_Player.FindAction("WeaponLeft", throwIfNotFound: true);
        m_Player_WeaponRight = m_Player.FindAction("WeaponRight", throwIfNotFound: true);
        m_Player_OpenShop = m_Player.FindAction("OpenShop", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        m_Player_Dev = m_Player.FindAction("Dev", throwIfNotFound: true);
        // CrosshairMovement
        m_CrosshairMovement = asset.FindActionMap("CrosshairMovement", throwIfNotFound: true);
        m_CrosshairMovement_MouseMovement = m_CrosshairMovement.FindAction("MouseMovement", throwIfNotFound: true);
        m_CrosshairMovement_JoystickMovement = m_CrosshairMovement.FindAction("JoystickMovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Shoot;
    private readonly InputAction m_Player_WeaponLeft;
    private readonly InputAction m_Player_WeaponRight;
    private readonly InputAction m_Player_OpenShop;
    private readonly InputAction m_Player_Pause;
    private readonly InputAction m_Player_Dev;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Shoot => m_Wrapper.m_Player_Shoot;
        public InputAction @WeaponLeft => m_Wrapper.m_Player_WeaponLeft;
        public InputAction @WeaponRight => m_Wrapper.m_Player_WeaponRight;
        public InputAction @OpenShop => m_Wrapper.m_Player_OpenShop;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputAction @Dev => m_Wrapper.m_Player_Dev;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @WeaponLeft.started += instance.OnWeaponLeft;
            @WeaponLeft.performed += instance.OnWeaponLeft;
            @WeaponLeft.canceled += instance.OnWeaponLeft;
            @WeaponRight.started += instance.OnWeaponRight;
            @WeaponRight.performed += instance.OnWeaponRight;
            @WeaponRight.canceled += instance.OnWeaponRight;
            @OpenShop.started += instance.OnOpenShop;
            @OpenShop.performed += instance.OnOpenShop;
            @OpenShop.canceled += instance.OnOpenShop;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Dev.started += instance.OnDev;
            @Dev.performed += instance.OnDev;
            @Dev.canceled += instance.OnDev;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @WeaponLeft.started -= instance.OnWeaponLeft;
            @WeaponLeft.performed -= instance.OnWeaponLeft;
            @WeaponLeft.canceled -= instance.OnWeaponLeft;
            @WeaponRight.started -= instance.OnWeaponRight;
            @WeaponRight.performed -= instance.OnWeaponRight;
            @WeaponRight.canceled -= instance.OnWeaponRight;
            @OpenShop.started -= instance.OnOpenShop;
            @OpenShop.performed -= instance.OnOpenShop;
            @OpenShop.canceled -= instance.OnOpenShop;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Dev.started -= instance.OnDev;
            @Dev.performed -= instance.OnDev;
            @Dev.canceled -= instance.OnDev;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // CrosshairMovement
    private readonly InputActionMap m_CrosshairMovement;
    private List<ICrosshairMovementActions> m_CrosshairMovementActionsCallbackInterfaces = new List<ICrosshairMovementActions>();
    private readonly InputAction m_CrosshairMovement_MouseMovement;
    private readonly InputAction m_CrosshairMovement_JoystickMovement;
    public struct CrosshairMovementActions
    {
        private @PlayerControls m_Wrapper;
        public CrosshairMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMovement => m_Wrapper.m_CrosshairMovement_MouseMovement;
        public InputAction @JoystickMovement => m_Wrapper.m_CrosshairMovement_JoystickMovement;
        public InputActionMap Get() { return m_Wrapper.m_CrosshairMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CrosshairMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICrosshairMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CrosshairMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CrosshairMovementActionsCallbackInterfaces.Add(instance);
            @MouseMovement.started += instance.OnMouseMovement;
            @MouseMovement.performed += instance.OnMouseMovement;
            @MouseMovement.canceled += instance.OnMouseMovement;
            @JoystickMovement.started += instance.OnJoystickMovement;
            @JoystickMovement.performed += instance.OnJoystickMovement;
            @JoystickMovement.canceled += instance.OnJoystickMovement;
        }

        private void UnregisterCallbacks(ICrosshairMovementActions instance)
        {
            @MouseMovement.started -= instance.OnMouseMovement;
            @MouseMovement.performed -= instance.OnMouseMovement;
            @MouseMovement.canceled -= instance.OnMouseMovement;
            @JoystickMovement.started -= instance.OnJoystickMovement;
            @JoystickMovement.performed -= instance.OnJoystickMovement;
            @JoystickMovement.canceled -= instance.OnJoystickMovement;
        }

        public void RemoveCallbacks(ICrosshairMovementActions instance)
        {
            if (m_Wrapper.m_CrosshairMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICrosshairMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CrosshairMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CrosshairMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CrosshairMovementActions @CrosshairMovement => new CrosshairMovementActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnWeaponLeft(InputAction.CallbackContext context);
        void OnWeaponRight(InputAction.CallbackContext context);
        void OnOpenShop(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnDev(InputAction.CallbackContext context);
    }
    public interface ICrosshairMovementActions
    {
        void OnMouseMovement(InputAction.CallbackContext context);
        void OnJoystickMovement(InputAction.CallbackContext context);
    }
}
